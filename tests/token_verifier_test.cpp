/*
 * Copyright (C) 2023 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */
#include <gtest/gtest.h>
#include <token_verifier.h>
#include <connector.h>
#include <types.h>
#include "mock_server.h"
#include <jwt.h>
#include <log.h>

extern std::mutex mockServerMutex;

TEST(VerifyTokenTest, TokenNULL)
{
	int result = verify_token(NULL, NULL, NULL, NULL,0,0);

	ASSERT_NE(result, 0);
}

TEST(VerifyTokenTest, ParsedTokenNULL)
{
	token token = { 0 };
	int result = verify_token(&token, NULL, NULL, NULL,0,0);

	ASSERT_NE(result, 0);
}

// API should be reachable as it is mocked and should pass verification.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8080/valid-jwks","kid":"12345"}'
string validJwksResponse =
"{\"keys\":[{\"alg\":\"PS384\",\"e\":\"AQAB\",\"kid\":\"1a1a2fe5fcf89009e4b96c45e0dceb005ea635d8ba2f6ed9caeef44ae235970decc586154fd9f740fb3b72ca176abb59\",\"kty\":\"RSA\",\"n\":\"vKKV7v7czOHapQ22ZnW677i4BkQIuxVTLk933javfZyLzpM7ZP_Mhvu9QqHrr-iKEqCDBuX1slL_hoB0fTCGGnoFTZ1lTqBdmhFysIgg5uzAqMWL2SJdzYX9RJ_ZXMFnvzTznO-b2jJd864pUI6y72mrzfTqQvgw_60fa3tjc9zjJPiqT1yadKar3G5c0fJqg7AUooTuMkIq291tHqoNhfYzzshZCSFV_d5RruheVMjvgMunx1zISiZ5RNRjcy39G7-08UTCIlSKE_GdsLDNViHqACz60BW3p-kSY5YdoslwKvDUOJnkVZMpJNfdYDoBIiIGgKL2j5H8arHmhSw1A1kl66YdDl7H5Pa46qp4B2FrS5Qpt1D9C-SZXkWN3wzDIQLsHKs0e86R5guLMS9_WcfsPCcHCLjqMZe6S-18SdjwzCK4hbn5vLCZYUzIyVEIcYT8f3mS3s3I1UxJRW53WZOEKkyGVKKGTF8uRxaksFVGrIdW0Q41Wo3mB30N2tqL\",\"x5c\":[\"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\"]}]}";
TEST(VerifyTokenTest, TokenValid)
{
	// Start the mock server
	MockServer mockServer(validJwksResponse);
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8080/valid-jwks";
	char *sample_baseurl = (char *) calloc(1, 27 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 26);

	struct token *ta_token = (token *) malloc(sizeof(token));

	const char *validToken1 =
		"eyJhbGciOiJQUzM4NCIsImprdSI6Imh0dHBzOi8vYW1iZXItdGVzdDEtdXNlcjEucHJvamVjdC1hbWJlci1zbWFzLmNvbS9jZXJ0cyIsImtpZCI6IjFhMWEyZmU1ZmNmODkwMDllNGI5NmM0NWUwZGNlYjAwNWVhNjM1ZDhiYTJmNmVkOWNhZWVmNDRhZTIzNTk3MGRlY2M1ODYxNTRmZDlmNzQwZmIzYjcyY2ExNzZhYmI1OSIsInR5cCI6IkpXVCJ9.eyJhdHRlc3Rlcl9oZWxkX2RhdGEiOiJaR0YwWVNCblpXNWxjbUYwWldRZ2FXNXphV1JsSUhSbFpRPT0iLCJhdHRlc3Rlcl9ydW50aW1lX2RhdGEiOnsia2V5cyI6W3siZSI6IkFRQUIiLCJrZXlfb3BzIjpbInNpZ24iXSwia2lkIjoiSENMQWtQdWIiLCJrdHkiOiJSU0EiLCJuIjoiNGZkU2lBQUFLTkRYSm1JT3VPZmxzc1MxUDhkMjZXbTdHNU9JU2ZHLUcweXZzTlFvaGVIdzY3YWJDRy1KeGJSeFRxeFBPQ1BCTmFhSDlEd1NrVzdkaWxyV2RUNUpnd1NfeGJJbjZWRl9Wbk8wSXZFVjFoQkxUWGtibEVGSTdPRm1EdEZnVHF6ZlZ0Sk9VVHZpamFhMWVCbXpaT3A5Sl9Bbnc3QzBXZWZFbDJRdG5IRDl1YjRJa1dNMldUei03VXE1cTY5dC1seXFfSTZuMlB5Q3p0OFpjXzZzTTkzYVJXalczX3JJWnY3SWdJcktTRUtfa2VxTHZfcWtQQ1VuTjNBNW5aeEhLaGRyaVlzS3FHdkZVOC1iQWFRYWRub1BCSEtpZzhwZHo1eVhmZXkzT0RjNlZRbG8xb09YM1hUNnBZeVhZNVJhcGxNckdZSms0UE5BUjU2aGRRIn0seyJlIjoiQVFBQiIsImtleV9vcHMiOlsiZW5jcnlwdCJdLCJraWQiOiJIQ0xFa1B1YiIsImt0eSI6IlJTQSIsIm4iOiIzSlpyendBQklqWWQ5dzUwejRNQ25LSGh1UGd0bVpMMXJtN01Lak5fQ3JDVkc4SGQ2dzhUTVVERGZzZ0xicHZFZFBoYWUwazlVckMtZEFTLTktYjNLT1VXRkhBVkJYMEZuNjZTTFVxS0E5QWxGb0xvTEVtWnR3dzM3cmxYLWo2eWFoTnR3OG1BV0stc2NVMVNxMlJyaWF1YnZZQldYbzRCeURwb3JYcXNhS29tR3FtcGllcjFJUWRmeDE2T3ctQkJRVHZoWnh1ZXBMb2RyczFPNjVJREttY1p3dmJrUllSWF9hTFFYaXZtcHlzdS1YYjhGUDg2MGlKNUl0T205dm1naTg1aUo0UU1UcU5kUlRXNWZ4TUlmV052cnBhbUx2Y29LZUxERnZnSm8xSlFudXVEdFRudTFxbE9IRFdNeWZ1X0o4QkV5eHNUUWkxNlJoQWlJMVR1MXcifV0sInVzZXItZGF0YSI6IjA2NjVFRUNBQkRGRTEyRTQyOEVCQzAyRTZCOTdBQzU1QkQxRjVBRTZFMjQ0QzVCODY1OUREMEZEMDU0NjA1NzgyMENBMzQ2MzczNjdCNUI5QkM2NTAwRUQ1QjMwQTAwODdEREY2QjFBQkQyMUY2MzNGRUEyMjA5RDcxRkE2QTMxIiwidm0tY29uZmlndXJhdGlvbiI6eyJjb25zb2xlLWVuYWJsZWQiOnRydWUsInJvb3QtY2VydC10aHVtYnByaW50IjoiNm5aWm5ZYUpjNEtxVVpfeXZBLW11Y0ZkWU5vdXZsUG5JVG5OTVhzSGwtMCIsInNlY3VyZS1ib290Ijp0cnVlLCJ0cG0tZW5hYmxlZCI6dHJ1ZSwidHBtLXBlcnNpc3RlZCI6dHJ1ZSwidm1VbmlxdWVJZCI6IjEyQ0RGQTk0LTk1RUUtNEYxQy05REQyLTk3MkVBNTM2RUUyQyJ9fSwiYXR0ZXN0ZXJfdGNiX2RhdGUiOiIyMDIzLTA4LTA5VDAwOjAwOjAwWiIsImF0dGVzdGVyX3RjYl9zdGF0dXMiOiJVcFRvRGF0ZSIsImF0dGVzdGVyX3R5cGUiOiJURFgiLCJkYmdzdGF0IjoiZGlzYWJsZWQiLCJlYXRfcHJvZmlsZSI6Imh0dHBzOi8vYW1iZXItdGVzdDEtdXNlcjEucHJvamVjdC1hbWJlci1zbWFzLmNvbS9lYXRfcHJvZmlsZS5odG1sIiwiZXhwIjoxNzA4NTEzOTkwLCJpYXQiOjE3MDg1MTM2OTAsImludHVzZSI6ImdlbmVyaWMiLCJpc3MiOiJJbnRlbCBUcnVzdCBBdXRob3JpdHkiLCJqdGkiOiI4ZGNlZDA1Yy0zZGFiLTQ2NDItYTUzOS00MTk1NzY2ZTdkYjUiLCJuYmYiOjE3MDg1MTM2OTAsInRkeF9jb2xsYXRlcmFsIjp7InFlaWRjZXJ0aGFzaCI6ImIyY2E3MWI4ZTg0OWQ1ZTc5OTQ1MWI0YmZlNDMxNTlhMGVlNTQ4MDMyY2VjYjJjMGU0NzliZjZlZTNmMzlmZDEiLCJxZWlkY3JsaGFzaCI6ImY0NTRkYzFiOWJkNGNlMzZjMDQyNDFlMmM4YzM3YTJhZTI2YjA3N2YyYzY2YjkxOTg0MzM2NTMxOGE1OTMzMmMiLCJxZWlkaGFzaCI6ImJkNGRjMzYwOWVmMzI1MzdlYTFlODU0MzFhZGVlZjU0NWE0MjI2NmQ3MTkzOGM0NWVlMzY4ZDU4MzI1NGU4YmQiLCJxdW90ZWhhc2giOiIzNTE2NmI5ZGM0NWRlYTMwYzJjNDY3N2UwNTg2MThhZjlkZTc1YmZjOWQ5MjA4NmRmNTllOTVjMTdhODVkMWM3IiwidGNiaW5mb2NlcnRoYXNoIjoiYjJjYTcxYjhlODQ5ZDVlNzk5NDUxYjRiZmU0MzE1OWEwZWU1NDgwMzJjZWNiMmMwZTQ3OWJmNmVlM2YzOWZkMSIsInRjYmluZm9jcmxoYXNoIjoiZjQ1NGRjMWI5YmQ0Y2UzNmMwNDI0MWUyYzhjMzdhMmFlMjZiMDc3ZjJjNjZiOTE5ODQzMzY1MzE4YTU5MzMyYyIsInRjYmluZm9oYXNoIjoiYjRkMzFkZGMxOGZhNWM4Mjk4YmVhMjQ4MTQ3Mjk4ZjE5YTQ4NTM3YzFiYmQxNjM5NjIzY2VmOTMxY2VhZTU5OSJ9LCJ0ZHhfaXNfZGVidWdnYWJsZSI6ZmFsc2UsInRkeF9tcmNvbmZpZ2lkIjoiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiwidGR4X21yb3duZXIiOiIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCJ0ZHhfbXJvd25lcmNvbmZpZyI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInRkeF9tcnNlYW0iOiIzNjAzMDRkMzRhMTZhYWNlMGExOGUwOWFkMmQwN2QyYjlmZDNjMTc0Mzc4ZTViZjEwODM4ODA3OTgyN2Y4OWZmNjJhY2M1ZjhjNDczZGQ0MDcwNjMyNDgzNGUyMDI5NDYiLCJ0ZHhfbXJzaWduZXJzZWFtIjoiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiwidGR4X21ydGQiOiIwMjRhMzJiMDcwMzgzMzMxMTgxNjE5ZmEzODdjYjRkNTVkMWUzODg3OWY5ODk5MzMwNTVjY2FkNWJjMmRiNzk1ZDE3MzdiNjYyMDU5NDlkMTU0NjlkYzhjMWJhN2FiN2IiLCJ0ZHhfcmVwb3J0X2RhdGEiOiIzOTVjY2M4NmY2MWNiM2RjNTU4NjY3NWNlZjE2YjZiY2RjMjI0NzIxNzM5Y2EzOTYyZGNjYjIxZWQzZmU2ZGQ0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInRkeF9ydG1yMCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInRkeF9ydG1yMSI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInRkeF9ydG1yMiI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInRkeF9ydG1yMyI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInRkeF9zZWFtX2F0dHJpYnV0ZXMiOiIwMDAwMDAwMDAwMDAwMDAwIiwidGR4X3NlYW1zdm4iOjIsInRkeF90ZF9hdHRyaWJ1dGVzIjoiMDAwMDAwMDAwMDAwMDAwMCIsInRkeF90ZF9hdHRyaWJ1dGVzX2RlYnVnIjpmYWxzZSwidGR4X3RkX2F0dHJpYnV0ZXNfa2V5X2xvY2tlciI6ZmFsc2UsInRkeF90ZF9hdHRyaWJ1dGVzX3BlcmZtb24iOmZhbHNlLCJ0ZHhfdGRfYXR0cmlidXRlc19wcm90ZWN0aW9uX2tleXMiOmZhbHNlLCJ0ZHhfdGRfYXR0cmlidXRlc19zZXB0dmVfZGlzYWJsZSI6ZmFsc2UsInRkeF90ZWVfdGNiX3N2biI6IjAyMDEwNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiwidGR4X3hmYW0iOiJlNzE4MDYwMDAwMDAwMDAwIiwidmVyIjoiMS4wLjAiLCJ2ZXJpZmllcl9pbnN0YW5jZV9pZHMiOlsiNjIxY2Q2MmItMjNmZC00MDIzLTgwZjctZDJjMGY5OTk3ZGQ4IiwiNTdjZmM0ZmUtMDZhNi00YmQzLTgyOWQtN2E0MjVlY2RjMWY2IiwiZDg4MTgyNjYtNWNjMi00YjUzLWE0MGUtZDQ1YWMyMzE2Yjk1IiwiZmFlNDg5YjctOGE3Yi00OTY0LWJjMDItYmVjMWYyY2I2Nzk1IiwiZWNlNDFlYWItODIyMy00NTQxLWJlZWMtN2I5MDZiMjc3NTI3IiwiYTU2YjlkYjAtZTNmYy00ZmNiLWEzODEtYjdiNzljMjAxZTYwIl0sInZlcmlmaWVyX25vbmNlIjp7InZhbCI6ImVteHpabEJsU0hSVlVFSndiemhPU2s0MEwzcFhWRzQ0UldGMlJqQldObFJ0YzNaa1JXSXhkMGRZY1VKYVMweFFUREZtVUhOTE9HMUVhbE5HV21kclVERnJTV3hxU0ZodGVDdGtaR2hFVjFoVGNXZzJjRUU5UFE9PSIsImlhdCI6Ik1qQXlOQzB3TWkweU1TQXhNVG93T0RveE1DQXJNREF3TUNCVlZFTT0iLCJzaWduYXR1cmUiOiJEQ3pBeDJoU1hnelUxVjlpRStPTkdLSzFic3c2Y2xua1kzUlJTL0ZDeE90Z0M2U0FJZHdIUjBBUU42VE9GbWt6ZWFETzV2RUdOeElObWdTQS80Vm5ZSUZPYjdDQVV0dkh2aEthR1BxTTNVRStrREtaYWgvZnkxbnIvUGFDRVUyNk14em5yVm0yVFR3MHFXM3h6enh3S1NVTmdiTFRmMjlNOFVYOGNNMFhiMHBmMExEbVEyRlVDWFhjd2dmRjh4MlMzZmpnQ0NaWXU1eHAxeDBZR3p5ZmF2WWhjU3hzYUZ0d0hZWTd2RzdJcUFUc3YyZlFLL0JndW1MQW51a0tvNGZVSEhQTkxkMmJyT2NLbXh3Vmc5NmR5QmNsSjlLR1ZkOWRYaEE5bklacU95bzIvSW5qTUtDTmxWRnA5ajF6Vm9nbGliTFlpVG9ZYWdCdGl6amxObERSZGFDaGc5dTc3a0hnanY4RjExUGN2M2ZSYTRJeWoyd3pUWE10SGxOMGZKMGYzdlkwaWd3dFBuV2l5U0o4WENMbXBIOFVRMmdja3hwenIwS20xaVBoUWFZK2IxWnFOY3FMTXFqZWRiajZkcjdBR3F3cGJOb1BoQXBUMndudE05b3JxVVhhbEhaU2diNUo4ckdHT25sVEZSR1lVYytMOVVPZ2xGY1pyUFJlV0lpbyJ9LCJleHAiOjE3MDg1MTU0OTIsImp0aSI6ImE4MWJmODI2LTVlMzAtNGYxOS1iNjM3LWNlZDhjMTc2YmQ5YyIsImlhdCI6MTcwODUxMzY5MiwiaXNzIjoiSW50ZWwgVHJ1c3QgQXV0aG9yaXR5IiwibmJmIjoxNzA4NTEzNjkyfQ.VmqoaWseYdUkHVrCcfJSgaC7yCiEcgbCUjGrFrw5Pf4eESnKvywrMN-z3ynIY4AsLQwXq9SbJjQEbhE9cOzlgjyN5M736I2iGHZhN9SOU6EwAxzoICOHLXbA6mBo0IISkeCTKQ4jOHldazxi9HX8vos9kdBAieIu6V1OF1Xzh_WOnlueKE_qzjt7nT1h4uJ_j1gZbOBGgTwrTlfzl6cSpNPPgg0k7BKVGZU3f-dk1xFnhvDxEhvvRQmRp2_0JbfdT8GDk_lqsCDVNA2vwqqoyTh7jn4u6KTS84PdJ2nyuaMyo0JepDKNAv1T2RAEXp-Pqhq7ZViE1Fj5mstwHAppN59C9yDjifx62ZFHx2haKHYUpxxSSl1CU0L8Qs8gs0oal_bFd9hckGMU3luhNnVFwNgym7kQMXQANGc5v_HXBwbmHmPeG5l8QuWTQfwHDU2Qyb71vfz7Vg-IshXzYkBMz4Br_rmp6e9JmPMxdUVt1kQUfaoAB7puHQdfBtKDWhLb";
	char *validToken = (char *) calloc(1, strlen(validToken1) * sizeof(char));
	memcpy(validToken, validToken1, strlen(validToken1));

	ta_token->jwt = validToken;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,1,1);

	// result should return 0 if the token verification succeeds
	ASSERT_EQ(result, 0);

	free(ta_token);
	ta_token = NULL;
	free(sample_baseurl);
	sample_baseurl = NULL;
	free(validToken);
	validToken = NULL;

	// Stop the mock server
	mockServer.stop();
}

// API should be reachable as it is mocked. But should return invalid JWKS data.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8080/invalid-cert","kid":"12345"}'
// verify_token should fail in unmarshalling JWKS
TEST(VerifyTokenTest, TokenWithInvalidJwksData)
{
	// Start the mock server
	MockServer mockServer("{\"invalidJwks\":\"Yes\",}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8080/invalid-cert";
	char *sample_baseurl = (char *) calloc(1, 35 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 34);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenJkuReturnsInvalidJwks1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQtY2VydCIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.OSJPKV36_L1_nSNlxcy6k4WTrTs7uMjPnYdUtTa7EKsy5qlEmMPLCJw8Bw7R9ngFKp9RQpjHaMbr9mslAhkc6KYgO3hEXn-RHwCPNMnH2VzHXrRmd8e96ZUtYNCpBFOQ0CagXhziNcetPelY_HyQHudsb-tbkW2UjORy1GdYqqmi3_PhXGH1OyCuVClnFk9FtD-lxv1lI8TQ0peTv6p0HWnpvnQN2NSGacj1hPP8_eJnbmJSxCP4M29FCIEuJy61n36QEXdxRstItRBv0h_Yqdu41KElK8WTJOVw445EME_AzYpn9M2ow-gZTvp9v9WElUfZjq88dOtrSjvBmvUMGA";
	char *tokenJkuReturnsInvalidJwks = (char *) calloc(1, 540 * sizeof(char));

	if (NULL == tokenJkuReturnsInvalidJwks)
	{
		ERROR("Error: In memory allocation for tokenJkuReturnsInvalidJwks\n");
	}

	memcpy(tokenJkuReturnsInvalidJwks, tokenJkuReturnsInvalidJwks1, 539);

	ta_token->jwt = tokenJkuReturnsInvalidJwks;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenJkuReturnsInvalidJwks);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenJkuReturnsInvalidJwks = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// API should be reachable as it is mocked but should return JWKS data with invalid x5c certificates.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8080/invalid-x5c","kid":"12345"}'
// verify_token should fail in verifying certificate chain in JWKS
TEST(VerifyTokenTest, TokenWithInvalidX5CInJwksData)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"sample-modulus\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"cert1\",\"cert2\",\"cert3\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8080/invalid-x5c";
	char *sample_baseurl = (char *) calloc(1, 28 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 27);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenWithInvalidX5CInJwks1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQteDVjIiwia2lkIjoiMTIzNDUifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.s2hARrvav_-a7TzphcZf1z64nZFFM5Ng5kaOOS8ChuuU4hFTgy_muA2q8tgPdrAv-JxHs6FM44RKtPKMsdwFYYd__t1_D3rHqod1-TKdSqawNhvc65_EuoygeXXriLGhd4tWhUw0iXSnudsd9CPBqMaPF_w51cQqwknA1aweDybvgLR1wsIhFrDMWkXWpso_GSqHjF97pmH_zGRtC-RU5QXMvClqumgnaNFXHuc30sZ45j1hl62jkDHeXVfUYLjqTcrR3i8L9U5HsKwOz1AjLUMFATNCven6cHsklCbsMQzAnORaR7GIGY6h-_6OnlmKlQih9F29lmiJR7OBs3qxug";
	char *tokenWithInvalidX5CInJwks = (char *) calloc(1, 540 * sizeof(char));

	if (NULL == tokenWithInvalidX5CInJwks)
	{
		ERROR("Error: In memory allocation for tokenWithInvalidX5CInJwks\n");
	}

	memcpy(tokenWithInvalidX5CInJwks, tokenWithInvalidX5CInJwks1, 539);

	ta_token->jwt = tokenWithInvalidX5CInJwks;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);
	
	free(ta_token);
	free(sample_baseurl);
	free(tokenWithInvalidX5CInJwks);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithInvalidX5CInJwks = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8080/kid-mismatch","kid":"abc123"}'
// verify_token should fail in verifying token because of key id mismatch
TEST(VerifyTokenTest, TokenVerifyFailForMismatchKeyId)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"qeCH-XC9TqNt8vSF1T5fHTcWyoW6t_TbMCbHh2rvOuaoqpZGNOblVYDmnzkFkrGQwAZ0ra5MrN-PCLxfuodK2OKAYR3sfxx8BiPhfE-rBoAXZLf5-JJRjB34DH8Pm674LX190BVieOmQLiqJafQ0lSArXPQwwRENEgtJr1eAM-wr8o_UhY2_kuQIhu79NPgPor0l5f4jlENNyC_uq84-qg37SCQzNGHEAesdTQIUoDmAMnKaLZfAa4gVIDQn7KZq5PkLM8IuNDoIEq63HkKdOghvB7MTfuX2B9BAYsxmkfoxaUZMG-cV8o2iCe6MxVQUB0zaql1xLo5eSgiKL7vLeJHv_Owv_Vr7PtbwWZe4r5R6RNTABeh7dHyWRfX63EEGJuq2vG67iukxOXgHLvGpdpoC1rhKG9pizffOjzWQsLYV8jxP9b_sM8TsMg9Yq1sa4kRV-2pG39DhjBKgc3Ba3cCiu1GszmXJZ4YPtH30VuPB2e4SlR5VUp9JCDokidLx\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"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\"],\"kid\":\"abc123\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8080/kid-mismatch";
	char *sample_baseurl = (char *) calloc(1, 38 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 37);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenWithWrongSign1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2tpZC1taXNtYXRjaCIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.by_5RnhiYpPHIVXaVBWO6QlAMoTW22d87mv1kX24qfQ";
	char *tokenWithWrongSign = (char *) calloc(1, 242 * sizeof(char));

	if (NULL == tokenWithWrongSign)
	{
		ERROR("Error: In memory allocation for tokenWithWrongSign\n");
	}

	memcpy(tokenWithWrongSign, tokenWithWrongSign1, 241);
	ta_token->jwt = tokenWithWrongSign;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenWithWrongSign);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithWrongSign = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// API should be reachable as it is mocked but should return JWKS data with invalid x5c certificates.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8080/invalid-x5c-count","kid":"12345"}'
// verify_token should fail in Token Signing Cert chain has more than 10 certificates
TEST(VerifyTokenTest, TokenWithInvalidX5CCountInJwksData)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"sample-modulus\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"cert1\",\"cert2\",\"cert3\",\"cert4\",\"cert5\",\"cert6\",\"cert7\",\"cert8\",\"cert9\",\"cert10\",\"cert11\",\"cert12\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8080/invalid-x5c-count";
	char *sample_baseurl = (char *) calloc(1, 34 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 33);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenWithInvalidX5CInJwks1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQteDVjLWNvdW50Iiwia2lkIjoiMTIzNDUifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.ouZrJ_DzYYLGbg5AznapZyvq33GEFk8TRI2Qv48ZKvvX0HZ8G9OZrp7zCFu9kA6terAHb2bF4KL8X_ycsHh8dDoZViRr8XIbB9wA2Pyhy74wUkvbg1U4pyon0r04_EcCJh_v187GsH7gXQI2vMJ43RUtSGF3lGQ_31sEZRmbTCvU8NDoMYOpwYdGnHFM-WQZkNnlKXS1l8zA7dc3uPtf1DSp4VlAEZEf6KLjtphGlfr2hfREF1Lc8tZ-NVROcRExQcj1gAW6H5inhGHcV5Uja8OCjwkMxpin_DYPFgmfZ2fnvtkIqLIYkqDk9l2Ih6MqCdJ9NH-P2lZEWKo4gR7-Ow";
	char *tokenWithInvalidX5CInJwks = (char *) calloc(1, 549 * sizeof(char));

	if (NULL == tokenWithInvalidX5CInJwks)
	{
		ERROR("Error: In memory allocation for tokenWithInvalidX5CInJwks\n");
	}

	memcpy(tokenWithInvalidX5CInJwks, tokenWithInvalidX5CInJwks1, 548);

	ta_token->jwt = tokenWithInvalidX5CInJwks;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenWithInvalidX5CInJwks);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithInvalidX5CInJwks = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// API should be reachable as it is mocked but should return JWKS data with invalid e and n fields. //invalid base64 input
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8080/invalid-e-and-n","kid":"12345"}'
// verify_token should fail in creating publickey by using e or n in JWKS
TEST(VerifyTokenTest, TokenJwksInvalidExponentAndModulus)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"sample-modulus\",\"e\":\"sample-exponent\",\"alg\":\"PS384\",\"x5c\":[\"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\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8080/invalid-e-and-n";
	char *sample_baseurl = (char *) calloc(1, 38 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 37);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenJwksInvalidEandN1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQtZS1hbmQtbiIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.sinM2pq4382SoN42yBQqKfycto_Ib2N43N4zvnOzQRsRqpG4aDlhlA49_gh7aXMmpK0eZ6AopH-8hH1xVHEDCJwKXOl_IPN0nBBVBGvvnMqbYwAk1IiXzuk8-G9ScJI4S4Vs1yDypCDeqWFAZx17R1b_-n9yHOkIr-pEv0L77N0fpTCuj4Xwpmr55dzz8d5Yr3T80SqGs95-Z318F2_Ar1uPiFz28aam3aR7OT3yEGHYHUfuv-We2EYOOoobgqrdHcpUAq84PoqgAVZkZpd_IuwRgdqMaH-l9Bs-eH7TMR9rFhiInVdGVe2vuTYCXV5AGLz8ftd8yBudxLX4R9MLsg";
	char *tokenJwksInvalidEandN = (char *) calloc(1, 545 * sizeof(char));

	if (NULL == tokenJwksInvalidEandN)
	{
		ERROR("Error: In memory allocation for tokenWithInvalidX5CInJwks\n");
	}

	memcpy(tokenJwksInvalidEandN, tokenJwksInvalidEandN1, 544);

	ta_token->jwt = tokenJwksInvalidEandN;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenJwksInvalidEandN);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenJwksInvalidEandN = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8080/wrong-signature","kid":"12345"}'
// verify_token should fail in verifying token because of wrong signature
TEST(VerifyTokenTest, TokenVerifyFailure)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"qeCH-XC9TqNt8vSF1T5fHTcWyoW6t_TbMCbHh2rvOuaoqpZGNOblVYDmnzkFkrGQwAZ0ra5MrN-PCLxfuodK2OKAYR3sfxx8BiPhfE-rBoAXZLf5-JJRjB34DH8Pm674LX190BVieOmQLiqJafQ0lSArXPQwwRENEgtJr1eAM-wr8o_UhY2_kuQIhu79NPgPor0l5f4jlENNyC_uq84-qg37SCQzNGHEAesdTQIUoDmAMnKaLZfAa4gVIDQn7KZq5PkLM8IuNDoIEq63HkKdOghvB7MTfuX2B9BAYsxmkfoxaUZMG-cV8o2iCe6MxVQUB0zaql1xLo5eSgiKL7vLeJHv_Owv_Vr7PtbwWZe4r5R6RNTABeh7dHyWRfX63EEGJuq2vG67iukxOXgHLvGpdpoC1rhKG9pizffOjzWQsLYV8jxP9b_sM8TsMg9Yq1sa4kRV-2pG39DhjBKgc3Ba3cCiu1GszmXJZ4YPtH30VuPB2e4SlR5VUp9JCDokidLx\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"MIIE1zCCAz+gAwIBAgICA+kwDQYJKoZIhvcNAQENBQAwWzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjEjMCEGA1UEAwwaSW50ZWwgQW1iZXIgQVRTIFNpZ25pbmcgQ0EwHhcNMjMwMTA0MDUwODQwWhcNMjMwNzAzMDUwODQwWjBgMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9uMSgwJgYDVQQDDB9BbWJlciBBdHRlc3RhdGlvbiBUb2tlbiBTaWduaW5nMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAqeCH+XC9TqNt8vSF1T5fHTcWyoW6t/TbMCbHh2rvOuaoqpZGNOblVYDmnzkFkrGQwAZ0ra5MrN+PCLxfuodK2OKAYR3sfxx8BiPhfE+rBoAXZLf5+JJRjB34DH8Pm674LX190BVieOmQLiqJafQ0lSArXPQwwRENEgtJr1eAM+wr8o/UhY2/kuQIhu79NPgPor0l5f4jlENNyC/uq84+qg37SCQzNGHEAesdTQIUoDmAMnKaLZfAa4gVIDQn7KZq5PkLM8IuNDoIEq63HkKdOghvB7MTfuX2B9BAYsxmkfoxaUZMG+cV8o2iCe6MxVQUB0zaql1xLo5eSgiKL7vLeJHv/Owv/Vr7PtbwWZe4r5R6RNTABeh7dHyWRfX63EEGJuq2vG67iukxOXgHLvGpdpoC1rhKG9pizffOjzWQsLYV8jxP9b/sM8TsMg9Yq1sa4kRV+2pG39DhjBKgc3Ba3cCiu1GszmXJZ4YPtH30VuPB2e4SlR5VUp9JCDokidLxAgMBAAGjgZ8wgZwwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUgQ9TpEF/iC7dHmLoWxptSkxd7PIwHwYDVR0jBBgwFoAUXvV6Ac7ejA3j62VzhlbGlvCD1iswCwYDVR0PBAQDAgTwMD8GA1UdHwQ4MDYwNKAyoDCGLlVSSTpodHRwczovL2FtYmVyLmludGVsLmNvbS9hdHMtc2lnbmluZy1jYS5jcmwwDQYJKoZIhvcNAQENBQADggGBADTU+pLkntdPJtn/FgCKWZ3DHcUORTfLI4KLdzsL7GQgAckqi3bSGzG7a88427J2g67E31K1dt/SnutHhpAEpJ3ETTkvz97zlaIKvhjJq1VP8k3qgrvKgNhmWI+KdxMEo9MyAvitDdJIrta+Z043JaleaYUJLqkzf/6peCEVQ1g+eaIj9YV11LW3Z9vRCUdKyxcY31YogkkS3WTF4spUOOFgzK6xz2vNpMOilwV9U0y/vivT194zkR1gItsASuIjQDyLG+wZ+V+5+CCroWUAfoU4mkzDGh35AR5x/u+Ixeg1rypyQKoUw6PM7YllXloyyfQRulyu0LIOS/XyniYOAWeBswOhE6n+O88fstGYcgyvN3S0sVrvPayKeC2m6QMQ/zrYZW+TIdhmmrL4DW819/jcbfvQsUqc6FcPLmwu8fveYLkeWpS7D30nmXlLNGWQMgP8WssFn8dyf1VZqkC+fpWCmDjppLgaOnDKkmKBuFNK7hC91gUkcWa9shvMqpulhg==\",\"MIIEzzCCAzegAwIBAgIBATANBgkqhkiG9w0BAQ0FADBqMRwwGgYDVQQDDBNJbnRlbCBBbWJlciBSb290IENBMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1NhbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjAeFw0yMzAxMDQwNTAzMzdaFw0zNjEyMzEwNTAzMzdaMFsxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEaMBgGA1UECgwRSW50ZWwgQ29ycG9yYXRpb24xIzAhBgNVBAMMGkludGVsIEFtYmVyIEFUUyBTaWduaW5nIENBMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAqwu9IEnNWJ/TWq/4qlL8SfppAOC/wCBo0GSxYUFvXXHUKIGCzTRTLxeNtGfMB9JolrT+XGFUFDhW8NuNH27uQBe4pKfqw6+IMkoH6qIGxidZmixM5pRA/VfVjJUthHhCewFjvw+Qv1uGppVeb6skHXzL5Ur3s9Sav3d9GXDymzdK+ehrxYPABfluBu12AQrKM+zQdr/MjT48YGO50nDEDcYQqVC0yPaMl3WuKW0KVq9dkkNyHcxWujRX/JNoQ8eeQ5XhzBTmSveakpUH+5dCWAEAnXrZ0Vsy8BI3tA1BfR9JAImjRZa6xclVr0pUGw/w+y5ZsVYjiqkbkeqqutjr+VBDUwZ87TgzeDwsSzDGoGfEhGh2VHoUpppKf6wSjZ/n/AgmYcXxz6JI5i3P8hCiocxG4Ml6HzYalP8flugWDqPRyxARFtBUojUyY23NfKFMOjwuI8AXelBVJ+To42Wp1+E5WlLkD9shlc/NA+Lp/SHmNpJMYFG+9YDeW7EuJ92JAgMBAAGjgY4wgYswHQYDVR0OBBYEFF71egHO3owN4+tlc4ZWxpbwg9YrMB8GA1UdIwQYMBaAFHRzOYxqLqiHX6nSiP53nGiO968OMA8GA1UdEwEB/wQFMAMBAf8wOAYDVR0fBDEwLzAtoCugKYYnVVJJOmh0dHBzOi8vYW1iZXIuaW50ZWwuY29tL3Jvb3QtY2EuY3JsMA0GCSqGSIb3DQEBDQUAA4IBgQABLNJhfx0LK9aJx6XRRnxBNhy3+kuwv5UKoZbAomvJacxB5YN9gKQ9nl+3nuAYRacMKrVlKmQsZz/TeA41Ufis7H9kKXMtIVP0fQBQsVywK/DPWAUm6a4n4tSDXRHz6gSd2hRQRP5zyqRCkbAbNvlO6HUO/P3EwXQdkMcXqRzXJa00JG+4ESnfRTCRP3NKyDaC0z/dFnK4BuQXHiIjAAzhhJZWPBks1ChdDQbDf21Ft9tYd2+4+dM6vbn9qEXWP3jBj1d/cQ9+0e5bQQFkDt6x+F7X+OGN42pJeCKolZfx4yGeKo0M4OH70EI6WkuBbISXMUuBEUOhIpNcDT2urmpd0jVfs47fYG/MVQpIziLysSEfU8heEzuuqdt/zw5XfI2our0LhpItNIHr7TQH3jKjUyQUYsGF2vURII3/Z7eEJxZOUKTJyVmGbqKQZ4tXVkQ7XDNs9q4b942K8Zc39w5KFn1Os5HbDCCNoG/QNwtX957rYL/5xBjvZ1HaFFTepmU=\",\"MIIExTCCAy2gAwIBAgIUepkR+/+jiocx/t8R1KUjsHiBLaswDQYJKoZIhvcNAQENBQAwajEcMBoGA1UEAwwTSW50ZWwgQW1iZXIgUm9vdCBDQTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRQwEgYDVQQHDAtTYW50YSBDbGFyYTEaMBgGA1UECgwRSW50ZWwgQ29ycG9yYXRpb24wHhcNMjMwMTA0MDUwMjEzWhcNNDkxMjMxMDUwMjEzWjBqMRwwGgYDVQQDDBNJbnRlbCBBbWJlciBSb290IENBMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1NhbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAL3nxzqexbSXgvLp+RNwA2w+b0X4G4Oqtu6mBWbq+GYTiQVi8Lch6NBO2QaF9WaCaSD4Sbx17yfMLO1v6p4hihjWHS1uODSDpXzUFYCuusfKL2hLWe8T6cNTNhgJWsQPJ2awTUQUJD6LpMLmos/jUb37/461kj/GsBy2/B5s1ZD3O9qnra8ElADLsiAkBAQP7Ke5WkVn9yW1bwHis1CfQsTNXirw9AiOOxgVYuIugZBddkDk3tIB8KfRpC4Fs8xOpciiBhIiCbvq0zAqWlTl2bJ510wiu+Fi3I7lF3dPk36y6xfq15SWNPTbyIbxh5Jx1eDu88JhlWDChBReKDPcS+LWDqwR15r+31kMhVnS631GCQKk/tREcnv3bEpu3NoNuo27tDUTAtooBCh/PUtqMNcOmKW90dSLE2wwNx/SkVaeRfQ+IEHA4jfwKyxnQ06NYQXP/4LrSkCv9Cob9fjk7x3c/kX0esmwDHAWBF3PZ/cfbE6SWExlDkWezVuA2aG3OwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR0czmMai6oh1+p0oj+d5xojvevDjAfBgNVHSMEGDAWgBR0czmMai6oh1+p0oj+d5xojvevDjAOBgNVHQ8BAf8EBAMCAQYwDQYJKoZIhvcNAQENBQADggGBAILrQFpyfVdbI6b3yC3HnyNniC1kHLDKcUND3Z7K7WGIxeQdaNiXLF7M8Ddvc1drzNrUKq4490kgd8zv+tmJpPSzkPpmMAFTyDWa9zMgzVQ70SoSZKuCh/oCMkRytL9/uMhgUjhIwiQ/UUr6n/blKS5kg1hOmTNH0BeFJ5tSkj7WdyaUNCG/Vpz2rZ74GP0X5jKyUO2TmbLrqbJqasoap72R+m6UCS2sVH5deFnsCTAL1PtmIHruSh9iMgfN9E7fIrP8GpAx4ZBjfUhT1q6eClDoegFp8/14Xf8GtoaTn60xpB/mzS2gUN1SR95RKG+MCTvgD2PMQTgmjkHnphHbVTL4Zs6Wv6lIW/Jl8qnZfk3XObK9CsZgBQVy6lPjYrqXvQHotYH3Sgr761EPCb3cFampts3o4xYZWcNscMnbQnt77dEIPsVhliOCYjOBEYQJNhoh+bx2qmQMB41PzwvFzpIevDRYLuPojH58NYQpjzx5z2wWApUEpO39QwySOleQFQ==\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8080/invalid-e-and-n";
	char *sample_baseurl = (char *) calloc(1, 38 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 37);

	struct token *ta_token = (token *) malloc(sizeof(token));
	// signature field at the end is replaced with a wrong one here.
	const char *tokenWithWrongSign1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL3dyb25nLXNpZ25hdHVyZSIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.by_5RnhiYpPHIVXaVBWO6QlAMoTW22d87mv1kX24qfQ";
	char *tokenWithWrongSign = (char *) calloc(1, 246 * sizeof(char));

	if (NULL == tokenWithWrongSign)
	{
		ERROR("Error: In memory allocation for tokenWithWrongSign\n");
	}

	memcpy(tokenWithWrongSign, tokenWithWrongSign1, 245);
	ta_token->jwt = tokenWithWrongSign;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenWithWrongSign);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithWrongSign = NULL;

	// Stop the mock server
	mockServer.stop();
}
