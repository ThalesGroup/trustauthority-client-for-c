/*
 * Copyright (C) 2023 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */
#include <gtest/gtest.h>
#include <token_verifier.h>
#include <connector.h>
#include <types.h>
#include "mock_server.h"
#include <jwt.h>
#include <log.h>

extern std::mutex mockServerMutex;

TEST(VerifyTokenTest, TokenNULL)
{
	int result = verify_token(NULL, NULL, NULL, NULL,0,0);

	ASSERT_NE(result, 0);
}

TEST(VerifyTokenTest, ParsedTokenNULL)
{
	token token = { 0 };
	int result = verify_token(&token, NULL, NULL, NULL,0,0);

	ASSERT_NE(result, 0);
}

// API should be reachable as it is mocked and should pass verification.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8081/valid-jwks","kid":"12345"}'
string validJwksResponse =
"{\"keys\":[{\"alg\":\"PS384\",\"e\":\"AQAB\",\"kid\":\"7b51f97448317458a755db25bb313277211d6d431760fdcbf6025dd288b1b4a7d18185c126decce1172d21be95cbfcb3\",\"kty\":\"RSA\",\"n\":\"vKKV7v7czOHapQ22ZnW677i4BkQIuxVTLk933javfZyLzpM7ZP_Mhvu9QqHrr-iKEqCDBuX1slL_hoB0fTCGGnoFTZ1lTqBdmhFysIgg5uzAqMWL2SJdzYX9RJ_ZXMFnvzTznO-b2jJd864pUI6y72mrzfTqQvgw_60fa3tjc9zjJPiqT1yadKar3G5c0fJqg7AUooTuMkIq291tHqoNhfYzzshZCSFV_d5RruheVMjvgMunx1zISiZ5RNRjcy39G7-08UTCIlSKE_GdsLDNViHqACz60BW3p-kSY5YdoslwKvDUOJnkVZMpJNfdYDoBIiIGgKL2j5H8arHmhSw1A1kl66YdDl7H5Pa46qp4B2FrS5Qpt1D9C-SZXkWN3wzDIQLsHKs0e86R5guLMS9_WcfsPCcHCLjqMZe6S-18SdjwzCK4hbn5vLCZYUzIyVEIcYT8f3mS3s3I1UxJRW53WZOEKkyGVKKGTF8uRxaksFVGrIdW0Q41Wo3mB30N2tqL\",\"x5c\":[\"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\"]},{\"alg\":\"RS256\",\"e\":\"AQAB\",\"kid\":\"7b51f97448317458a755db25bb313277211d6d431760fdcbf6025dd288b1b4a7d18185c126decce1172d21be95cbfcb3\",\"kty\":\"RSA\",\"n\":\"vKKV7v7czOHapQ22ZnW677i4BkQIuxVTLk933javfZyLzpM7ZP_Mhvu9QqHrr-iKEqCDBuX1slL_hoB0fTCGGnoFTZ1lTqBdmhFysIgg5uzAqMWL2SJdzYX9RJ_ZXMFnvzTznO-b2jJd864pUI6y72mrzfTqQvgw_60fa3tjc9zjJPiqT1yadKar3G5c0fJqg7AUooTuMkIq291tHqoNhfYzzshZCSFV_d5RruheVMjvgMunx1zISiZ5RNRjcy39G7-08UTCIlSKE_GdsLDNViHqACz60BW3p-kSY5YdoslwKvDUOJnkVZMpJNfdYDoBIiIGgKL2j5H8arHmhSw1A1kl66YdDl7H5Pa46qp4B2FrS5Qpt1D9C-SZXkWN3wzDIQLsHKs0e86R5guLMS9_WcfsPCcHCLjqMZe6S-18SdjwzCK4hbn5vLCZYUzIyVEIcYT8f3mS3s3I1UxJRW53WZOEKkyGVKKGTF8uRxaksFVGrIdW0Q41Wo3mB30N2tqL\",\"x5c\":[\"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\"]}]}";
TEST(VerifyTokenTest, TokenValid)
{
	// Start the mock server
	MockServer mockServer(validJwksResponse);
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8081/valid-jwks";
	char *sample_baseurl = (char *) calloc(1, 27 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 26);

	struct token *ta_token = (token *) malloc(sizeof(token));

	const char *validToken1 =
		"eyJhbGciOiJQUzM4NCIsImprdSI6Imh0dHBzOi8vYW1iZXItZGV2MDItdXNlcjUucHJvamVjdC1hbWJlci1zbWFzLmNvbS9jZXJ0cyIsImtpZCI6IjdiNTFmOTc0NDgzMTc0NThhNzU1ZGIyNWJiMzEzMjc3MjExZDZkNDMxNzYwZmRjYmY2MDI1ZGQyODhiMWI0YTdkMTgxODVjMTI2ZGVjY2UxMTcyZDIxYmU5NWNiZmNiMyIsInR5cCI6IkpXVCJ9.eyJhdHRlc3Rlcl9hZHZpc29yeV9pZHMiOlsiSU5URUwtU0EtMDA1ODYiLCJJTlRFTC1TQS0wMDYxNCIsIklOVEVMLVNBLTAwNjE1IiwiSU5URUwtU0EtMDA2NTciLCJJTlRFTC1TQS0wMDczMCIsIklOVEVMLVNBLTAwNzM4IiwiSU5URUwtU0EtMDA3NjciLCJJTlRFTC1TQS0wMDgyOCIsIklOVEVMLVNBLTAwODM3Il0sImF0dGVzdGVyX2hlbGRfZGF0YSI6IkFRQUJBR2VFWXVzOWV6WXZrTmVWS2FjQ0VnUkNZWnhmMkZLZU5PVnFIS1JnaDdVT3BsejZjUHl1S1hNbFRiSkJKMFBOT1FtUVdGYjlXaldlZy82QUhIYVM3bjA3Qi83QlpVSGRMMmp1S0FvNmxMMGwwUlFsbU9wRlMrditjOHJoa1M4YjZyc2UyZ3NxZy9XYjJSM24zbmpDVW44aVJocE5kQnAyWHEwTkh2OFNQZE4rQWplY1l1VElJSHVGalVEQzJPYisxYmZyYzk2SDdMbitzQ3B5WVF4SUsxbmNlZWEyVWlFM1BvdTQ5ZGU5dkdkQVliK2FLS1Z0OGlEWnZDYmRoS2luQkUvMnkyTnk0QzdyTnEzOC82aW50NWY4OXZ3WWxiOG1WdHBNSk5QNkExbGUxR3pIYm13YnV0S3pxd2xzK01td1l3Ynh6ZUdqa0lrMW05blR1Y1pLTE54WWZIQnpGMk5zTnZSSHZ0UzY4aUFHNXJQbnZ0SzJmQWRyRVVQTFNibGNYajdrRWMrZDRWc1dhdEZyK25WM2VuRy8wUkJ6WE1ZSnVIOVA3Tk5nTTdEdzA5bFZEYTVqTkhpWHRjKy8yaWxlalo3MDBxeWgvUkttb2RKWlUvMUVjWGxyMFVyUU1ER1BMWHFySTVXMWdhYk9lV0MxUncvOWlyRzhlc2Q5ZFE2VGhnPT0iLCJhdHRlc3Rlcl90Y2JfZGF0ZSI6IjIwMjEtMTEtMTBUMDA6MDA6MDBaIiwiYXR0ZXN0ZXJfdGNiX3N0YXR1cyI6Ik91dE9mRGF0ZSIsImF0dGVzdGVyX3R5cGUiOiJTR1giLCJkYmdzdGF0IjoiZGlzYWJsZWQiLCJlYXRfcHJvZmlsZSI6Imh0dHBzOi8vL2FtYmVyLWRldjAyLXVzZXI1LnByb2plY3QtYW1iZXItc21hcy5jb20vZWF0X3Byb2ZpbGUiLCJpbnR1c2UiOiJnZW5lcmljIiwicG9saWN5X2RlZmluZWRfY2xhaW1zIjpudWxsLCJwb2xpY3lfaWRzX21hdGNoZWQiOm51bGwsInBvbGljeV9pZHNfdW5tYXRjaGVkIjpbeyJpZCI6IjEwMjcxN2VlLWM0MWEtNDgwNy05ZDBiLWI4YzYyNTIxN2UyZiIsInZlcnNpb24iOiJ2NSIsImhhc2giOiJVMjFGZEZVd1VGVTRWVEZwT1RGRldEa3pTR2RGZGtWNGFIbDFSeXRGZW5Wd1ZFbHpPRlU0U1U0cmJuZHJZVVU1VVd4SFFtaEZTSE50YWs5YVNtRk9XUT09In1dLCJzZ3hfY29sbGF0ZXJhbCI6eyJxZWlkY2VydGhhc2giOiJiMmNhNzFiOGU4NDlkNWU3OTk0NTFiNGJmZTQzMTU5YTBlZTU0ODAzMmNlY2IyYzBlNDc5YmY2ZWUzZjM5ZmQxIiwicWVpZGNybGhhc2giOiJjYTY4NWZmMWZhNTcyYjVmZDViMGQxMGMxZTA2ZmNlNDBmMjU1NDQ3MjliNjA1MjY4OTU4M2FhMTcxNjZhYjg1IiwicWVpZGhhc2giOiJlYTEzZDc2YzBhMjgxZTQ2MDBmYzI5MzhkMTZhZDEzZDE3NDkyMTllNTNjZjViMTNjZGRjZDZjMTEzY2RjMDRhIiwicXVvdGVoYXNoIjoiMWE0MzM4M2JmNzlkZDA5MTBmNmY4Y2Q5OWE3N2NiOGY1ZmFjNTUzMzA4YzE4ZTBlMWY0ZjJkODM4Mjc3OTQyZiIsInRjYmluZm9jZXJ0aGFzaCI6ImIyY2E3MWI4ZTg0OWQ1ZTc5OTQ1MWI0YmZlNDMxNTlhMGVlNTQ4MDMyY2VjYjJjMGU0NzliZjZlZTNmMzlmZDEiLCJ0Y2JpbmZvY3JsaGFzaCI6ImNhNjg1ZmYxZmE1NzJiNWZkNWIwZDEwYzFlMDZmY2U0MGYyNTU0NDcyOWI2MDUyNjg5NTgzYWExNzE2NmFiODUiLCJ0Y2JpbmZvaGFzaCI6IjljOTkyMGRjNjFlNTI0N2ZhYzk4YzU5NzY2ODkzMWVkYTM0YTc3MWFlM2QyZGQwMjJkMjgxZmY2NDAxM2FiNDgifSwic2d4X2lzX2RlYnVnZ2FibGUiOmZhbHNlLCJzZ3hfaXN2cHJvZGlkIjowLCJzZ3hfaXN2c3ZuIjowLCJzZ3hfbXJlbmNsYXZlIjoiODNmNGU4MTk4NjFhZGVmNmZmYjJhNDg2NWVmZWE5MzM3YjkxZWQzMGZhMzM0OTFiMTdmMGQ1ZDllODIwNDQxMCIsInNneF9tcnNpZ25lciI6IjgzZDcxOWU3N2RlYWNhMTQ3MGY2YmFmNjJhNGQ3NzQzMDNjODk5ZGI2OTAyMGY5YzcwZWUxZGZjMDhjN2NlOWUiLCJzZ3hfcmVwb3J0X2RhdGEiOiJmNDkzNjkxYjJkMzczZThiYzg4MDc1ZWJhZGViYjQzYTUxOGE0NDRjNmQxMjc3NjZhYTdmMjYyNmEwODI2MGY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInZlciI6IjEuMC4wIiwidmVyaWZpZXJfaW5zdGFuY2VfaWRzIjpbIjQyNTk3YjUxLTZmMzgtNDA0Yi1iN2U4LTI1ZGU0YjYwODYyYiIsIjliNThlZTY3LTEyY2EtNDcyMy1hMWU0LTMyYjJmYzI4YmRkMiIsImYzNmVhMTFiLTQwMTgtNGJhNy1iZGVjLTY3NjAzODE0YjQxYSIsIjNkY2YwNDQ4LTc2NmYtNDM5Mi1hODZkLTkwY2MzODY3NGQyZSIsImE3YjZmMmJiLWViNTMtNDQ1MC04MWNiLWYyYTA2ZDQwNzZhOSIsIjNkZDQ4OTAxLWUwMzAtNGVjZi04MDJiLTJjM2Q4NzYxODAyYyJdLCJ2ZXJpZmllcl9ub25jZSI6eyJpYXQiOiJNakF5TkMwd05pMHhNU0F3TkRveE1Ub3dNeUFyTURBd01DQlZWRU09Iiwic2lnbmF0dXJlIjoiaVh0NVZVNlhWbFJDSGd0dDc0N01lbjRpSTRaeEtTSGkybnBUZW9qeDFzZmdIazB6WkNZMnpqbTNCQ3JwNU1pY2F1TUdTeURYOFJSemM3K1JGblZKUTRwUGM3SXluZlhHczAwMU1OZjdOK1B1UXNXSURHKzlDaCtzSjkvdysyWE10N3dVOGJOb1U3WDNHd2NKWXg1SmZFVEpMVllJZld0OWhPbXJ3TVFsZU9sYml3YmVCMzhyMzg3TW91TGpMV0JNT1lxUmdZL3ZlUGJHZmNwd2FuSFQ2VHRVWVhKVGNjTTJRV1k5UWdsMGxOQ1lVcldpMjFtOTRqelo4Z2Z0VXh4UDJIZXVNOElnZUl2WDdsWUFMelAyTDhoQmcxdk5aMy9Kbk9iemZ1cDhnM3dPRWZLM3c1WTVhNTdHMXAvdzl5OHFYS2laTEFrL2J6VHZZUjlVblJ0cHV6d0NSaC95eXk2VXBxYWVKTVZ6UzN2OGE0ejVlYXdOY2tYRjJBdUFCYUxaYXNabGRMMEFTbUMrN2FjME0xL0psbDBPcFoxVFNTY3Q4Ym5JeHN4bUZhV3hKOHc0TlVzbWpLK0FXa1VOT2RLUTJDQXhJbjFFVG5jclAwVVJVRGZRRzN5U1lHZTJyT1JQbG5iRHFVOTJQWEk4eVlHTzVEOW8zVVI1L3NqUzhkS3QiLCJ2YWwiOiJPRTUyZGxGcGFsUlhORFUzYmxORFJESkJXRkpZY1V4aGNVTnBjM2xMV1RaT2FEZ3JOMnB0VWtKV1J6YzVLMGsyU21sNU5WQkZaMDlQUTFKd1ZXeE1TSGc0YzJkS2JrOTNaek55UkZwaE16WkhlV2hNVW1jOVBRPT0ifSwiZXhwIjoxNzE4MDgwODYzLCJqdGkiOiI1N2FhZTJiNi1kMjJjLTQ4NzgtYTFiNy0zM2I0YWY0Y2FlOGQiLCJpYXQiOjE3MTgwNzkwNjMsImlzcyI6IkludGVsIFRydXN0IEF1dGhvcml0eSIsIm5iZiI6MTcxODA3OTA2M30.OHrARnzkGsrFIym_njRARzhuYsdbHY1WU_UMTgfaeMngH4exSmtETGdP0nGI32WKdd1pJ1k_olrH0dyTlH4H7eCqNFkhJ5g8ikGhD4neJE4lo8UFmoYiRI505LJIbTrIyASWC6TiYkAurrSVcpNQdUyGj21QI1lKxhuiF1naStCoowTaY_SsKiKS4uARPPnHsVBbTPnUe8e41HlJ8kfbd3neek8BMpBreqSA87PBjaJ3t4ehlIs1SSPYdNIy-I2LFkf6Tq1kT7YVJqgMYbqS2itcvgjtn1hgx7iqdnoaCawNN3PK-59SMXRs8UQGlHRYZqia_1x155is7-pKltkuBwNQsEipJDhJT6ar0znre1Tc66-nEbTGb5cgt_pBT2KYbFZp0Lnua3Kf6PkllPVra_WecV3vdG4c9VHtDNxX2qUWx7gGEoUsWeV09rCgyHuazKgg7zzypkVedfhOJHSYcGgMQW9MjbQwyrc8ocHFU9lrO8hvXnJT4SkT3ZYyiEht";
	char *validToken = (char *) calloc(1, strlen(validToken1) * sizeof(char));
	memcpy(validToken, validToken1, strlen(validToken1));

	ta_token->jwt = validToken;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,1,1);

	// result should return 0 if the token verification succeeds

	ASSERT_EQ(result, 0);

	free(ta_token);
	ta_token = NULL;
	free(sample_baseurl);
	sample_baseurl = NULL;
	free(validToken);
	validToken = NULL;

	// Stop the mock server
	mockServer.stop();
}

// API should be reachable as it is mocked. But should return invalid JWKS data.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8081/invalid-cert","kid":"12345"}'
// verify_token should fail in unmarshalling JWKS
TEST(VerifyTokenTest, TokenWithInvalidJwksData)
{
	// Start the mock server
	MockServer mockServer("{\"invalidJwks\":\"Yes\",}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8081/invalid-cert";
	char *sample_baseurl = (char *) calloc(1, 35 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 34);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenJkuReturnsInvalidJwks1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQtY2VydCIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.OSJPKV36_L1_nSNlxcy6k4WTrTs7uMjPnYdUtTa7EKsy5qlEmMPLCJw8Bw7R9ngFKp9RQpjHaMbr9mslAhkc6KYgO3hEXn-RHwCPNMnH2VzHXrRmd8e96ZUtYNCpBFOQ0CagXhziNcetPelY_HyQHudsb-tbkW2UjORy1GdYqqmi3_PhXGH1OyCuVClnFk9FtD-lxv1lI8TQ0peTv6p0HWnpvnQN2NSGacj1hPP8_eJnbmJSxCP4M29FCIEuJy61n36QEXdxRstItRBv0h_Yqdu41KElK8WTJOVw445EME_AzYpn9M2ow-gZTvp9v9WElUfZjq88dOtrSjvBmvUMGA";
	char *tokenJkuReturnsInvalidJwks = (char *) calloc(1, 540 * sizeof(char));

	if (NULL == tokenJkuReturnsInvalidJwks)
	{
		ERROR("Error: In memory allocation for tokenJkuReturnsInvalidJwks\n");
	}

	memcpy(tokenJkuReturnsInvalidJwks, tokenJkuReturnsInvalidJwks1, 539);

	ta_token->jwt = tokenJkuReturnsInvalidJwks;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenJkuReturnsInvalidJwks);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenJkuReturnsInvalidJwks = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// API should be reachable as it is mocked but should return JWKS data with invalid x5c certificates.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8081/invalid-x5c","kid":"12345"}'
// verify_token should fail in verifying certificate chain in JWKS
TEST(VerifyTokenTest, TokenWithInvalidX5CInJwksData)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"sample-modulus\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"cert1\",\"cert2\",\"cert3\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8081/invalid-x5c";
	char *sample_baseurl = (char *) calloc(1, 28 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 27);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenWithInvalidX5CInJwks1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQteDVjIiwia2lkIjoiMTIzNDUifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.s2hARrvav_-a7TzphcZf1z64nZFFM5Ng5kaOOS8ChuuU4hFTgy_muA2q8tgPdrAv-JxHs6FM44RKtPKMsdwFYYd__t1_D3rHqod1-TKdSqawNhvc65_EuoygeXXriLGhd4tWhUw0iXSnudsd9CPBqMaPF_w51cQqwknA1aweDybvgLR1wsIhFrDMWkXWpso_GSqHjF97pmH_zGRtC-RU5QXMvClqumgnaNFXHuc30sZ45j1hl62jkDHeXVfUYLjqTcrR3i8L9U5HsKwOz1AjLUMFATNCven6cHsklCbsMQzAnORaR7GIGY6h-_6OnlmKlQih9F29lmiJR7OBs3qxug";
	char *tokenWithInvalidX5CInJwks = (char *) calloc(1, 540 * sizeof(char));

	if (NULL == tokenWithInvalidX5CInJwks)
	{
		ERROR("Error: In memory allocation for tokenWithInvalidX5CInJwks\n");
	}

	memcpy(tokenWithInvalidX5CInJwks, tokenWithInvalidX5CInJwks1, 539);

	ta_token->jwt = tokenWithInvalidX5CInJwks;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);
	
	free(ta_token);
	free(sample_baseurl);
	free(tokenWithInvalidX5CInJwks);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithInvalidX5CInJwks = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8081/kid-mismatch","kid":"abc123"}'
// verify_token should fail in verifying token because of key id mismatch
TEST(VerifyTokenTest, TokenVerifyFailForMismatchKeyId)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"qeCH-XC9TqNt8vSF1T5fHTcWyoW6t_TbMCbHh2rvOuaoqpZGNOblVYDmnzkFkrGQwAZ0ra5MrN-PCLxfuodK2OKAYR3sfxx8BiPhfE-rBoAXZLf5-JJRjB34DH8Pm674LX190BVieOmQLiqJafQ0lSArXPQwwRENEgtJr1eAM-wr8o_UhY2_kuQIhu79NPgPor0l5f4jlENNyC_uq84-qg37SCQzNGHEAesdTQIUoDmAMnKaLZfAa4gVIDQn7KZq5PkLM8IuNDoIEq63HkKdOghvB7MTfuX2B9BAYsxmkfoxaUZMG-cV8o2iCe6MxVQUB0zaql1xLo5eSgiKL7vLeJHv_Owv_Vr7PtbwWZe4r5R6RNTABeh7dHyWRfX63EEGJuq2vG67iukxOXgHLvGpdpoC1rhKG9pizffOjzWQsLYV8jxP9b_sM8TsMg9Yq1sa4kRV-2pG39DhjBKgc3Ba3cCiu1GszmXJZ4YPtH30VuPB2e4SlR5VUp9JCDokidLx\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"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\"],\"kid\":\"abc123\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8081/kid-mismatch";
	char *sample_baseurl = (char *) calloc(1, 38 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 37);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenWithWrongSign1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2tpZC1taXNtYXRjaCIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.by_5RnhiYpPHIVXaVBWO6QlAMoTW22d87mv1kX24qfQ";
	char *tokenWithWrongSign = (char *) calloc(1, 242 * sizeof(char));

	if (NULL == tokenWithWrongSign)
	{
		ERROR("Error: In memory allocation for tokenWithWrongSign\n");
	}

	memcpy(tokenWithWrongSign, tokenWithWrongSign1, 241);
	ta_token->jwt = tokenWithWrongSign;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenWithWrongSign);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithWrongSign = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// API should be reachable as it is mocked but should return JWKS data with invalid x5c certificates.
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8081/invalid-x5c-count","kid":"12345"}'
// verify_token should fail in Token Signing Cert chain has more than 10 certificates
TEST(VerifyTokenTest, TokenWithInvalidX5CCountInJwksData)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"sample-modulus\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"cert1\",\"cert2\",\"cert3\",\"cert4\",\"cert5\",\"cert6\",\"cert7\",\"cert8\",\"cert9\",\"cert10\",\"cert11\",\"cert12\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8081/invalid-x5c-count";
	char *sample_baseurl = (char *) calloc(1, 34 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 33);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenWithInvalidX5CInJwks1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQteDVjLWNvdW50Iiwia2lkIjoiMTIzNDUifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.ouZrJ_DzYYLGbg5AznapZyvq33GEFk8TRI2Qv48ZKvvX0HZ8G9OZrp7zCFu9kA6terAHb2bF4KL8X_ycsHh8dDoZViRr8XIbB9wA2Pyhy74wUkvbg1U4pyon0r04_EcCJh_v187GsH7gXQI2vMJ43RUtSGF3lGQ_31sEZRmbTCvU8NDoMYOpwYdGnHFM-WQZkNnlKXS1l8zA7dc3uPtf1DSp4VlAEZEf6KLjtphGlfr2hfREF1Lc8tZ-NVROcRExQcj1gAW6H5inhGHcV5Uja8OCjwkMxpin_DYPFgmfZ2fnvtkIqLIYkqDk9l2Ih6MqCdJ9NH-P2lZEWKo4gR7-Ow";
	char *tokenWithInvalidX5CInJwks = (char *) calloc(1, 549 * sizeof(char));

	if (NULL == tokenWithInvalidX5CInJwks)
	{
		ERROR("Error: In memory allocation for tokenWithInvalidX5CInJwks\n");
	}

	memcpy(tokenWithInvalidX5CInJwks, tokenWithInvalidX5CInJwks1, 548);

	ta_token->jwt = tokenWithInvalidX5CInJwks;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenWithInvalidX5CInJwks);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithInvalidX5CInJwks = NULL;	

	// Stop the mock server
	mockServer.stop();
}


// API should be reachable as it is mocked but should return JWKS data with invalid e and n fields. //invalid base64 input
// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8081/invalid-e-and-n","kid":"12345"}'
// verify_token should fail in creating publickey by using e or n in JWKS
TEST(VerifyTokenTest, TokenJwksInvalidExponentAndModulus)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"sample-modulus\",\"e\":\"sample-exponent\",\"alg\":\"PS384\",\"x5c\":[\"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\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8081/invalid-e-and-n";
	char *sample_baseurl = (char *) calloc(1, 38 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 37);

	struct token *ta_token = (token *) malloc(sizeof(token));
	const char *tokenJwksInvalidEandN1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL2ludmFsaWQtZS1hbmQtbiIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.sinM2pq4382SoN42yBQqKfycto_Ib2N43N4zvnOzQRsRqpG4aDlhlA49_gh7aXMmpK0eZ6AopH-8hH1xVHEDCJwKXOl_IPN0nBBVBGvvnMqbYwAk1IiXzuk8-G9ScJI4S4Vs1yDypCDeqWFAZx17R1b_-n9yHOkIr-pEv0L77N0fpTCuj4Xwpmr55dzz8d5Yr3T80SqGs95-Z318F2_Ar1uPiFz28aam3aR7OT3yEGHYHUfuv-We2EYOOoobgqrdHcpUAq84PoqgAVZkZpd_IuwRgdqMaH-l9Bs-eH7TMR9rFhiInVdGVe2vuTYCXV5AGLz8ftd8yBudxLX4R9MLsg";
	char *tokenJwksInvalidEandN = (char *) calloc(1, 545 * sizeof(char));

	if (NULL == tokenJwksInvalidEandN)
	{
		ERROR("Error: In memory allocation for tokenWithInvalidX5CInJwks\n");
	}

	memcpy(tokenJwksInvalidEandN, tokenJwksInvalidEandN1, 544);

	ta_token->jwt = tokenJwksInvalidEandN;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenJwksInvalidEandN);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenJwksInvalidEandN = NULL;	

	// Stop the mock server
	mockServer.stop();
}

// HEADER='{"alg":"PS384","typ":"JWT","jku":"localhost:8081/wrong-signature","kid":"12345"}'
// verify_token should fail in verifying token because of wrong signature
TEST(VerifyTokenTest, TokenVerifyFailure)
{
	// Start the mock server
	MockServer
		mockServer
		("{\"keys\":[{\"kty\":\"RSA\",\"n\":\"qeCH-XC9TqNt8vSF1T5fHTcWyoW6t_TbMCbHh2rvOuaoqpZGNOblVYDmnzkFkrGQwAZ0ra5MrN-PCLxfuodK2OKAYR3sfxx8BiPhfE-rBoAXZLf5-JJRjB34DH8Pm674LX190BVieOmQLiqJafQ0lSArXPQwwRENEgtJr1eAM-wr8o_UhY2_kuQIhu79NPgPor0l5f4jlENNyC_uq84-qg37SCQzNGHEAesdTQIUoDmAMnKaLZfAa4gVIDQn7KZq5PkLM8IuNDoIEq63HkKdOghvB7MTfuX2B9BAYsxmkfoxaUZMG-cV8o2iCe6MxVQUB0zaql1xLo5eSgiKL7vLeJHv_Owv_Vr7PtbwWZe4r5R6RNTABeh7dHyWRfX63EEGJuq2vG67iukxOXgHLvGpdpoC1rhKG9pizffOjzWQsLYV8jxP9b_sM8TsMg9Yq1sa4kRV-2pG39DhjBKgc3Ba3cCiu1GszmXJZ4YPtH30VuPB2e4SlR5VUp9JCDokidLx\",\"e\":\"AQAB\",\"alg\":\"PS384\",\"x5c\":[\"MIIE1zCCAz+gAwIBAgICA+kwDQYJKoZIhvcNAQENBQAwWzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjEjMCEGA1UEAwwaSW50ZWwgQW1iZXIgQVRTIFNpZ25pbmcgQ0EwHhcNMjMwMTA0MDUwODQwWhcNMjMwNzAzMDUwODQwWjBgMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9uMSgwJgYDVQQDDB9BbWJlciBBdHRlc3RhdGlvbiBUb2tlbiBTaWduaW5nMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAqeCH+XC9TqNt8vSF1T5fHTcWyoW6t/TbMCbHh2rvOuaoqpZGNOblVYDmnzkFkrGQwAZ0ra5MrN+PCLxfuodK2OKAYR3sfxx8BiPhfE+rBoAXZLf5+JJRjB34DH8Pm674LX190BVieOmQLiqJafQ0lSArXPQwwRENEgtJr1eAM+wr8o/UhY2/kuQIhu79NPgPor0l5f4jlENNyC/uq84+qg37SCQzNGHEAesdTQIUoDmAMnKaLZfAa4gVIDQn7KZq5PkLM8IuNDoIEq63HkKdOghvB7MTfuX2B9BAYsxmkfoxaUZMG+cV8o2iCe6MxVQUB0zaql1xLo5eSgiKL7vLeJHv/Owv/Vr7PtbwWZe4r5R6RNTABeh7dHyWRfX63EEGJuq2vG67iukxOXgHLvGpdpoC1rhKG9pizffOjzWQsLYV8jxP9b/sM8TsMg9Yq1sa4kRV+2pG39DhjBKgc3Ba3cCiu1GszmXJZ4YPtH30VuPB2e4SlR5VUp9JCDokidLxAgMBAAGjgZ8wgZwwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUgQ9TpEF/iC7dHmLoWxptSkxd7PIwHwYDVR0jBBgwFoAUXvV6Ac7ejA3j62VzhlbGlvCD1iswCwYDVR0PBAQDAgTwMD8GA1UdHwQ4MDYwNKAyoDCGLlVSSTpodHRwczovL2FtYmVyLmludGVsLmNvbS9hdHMtc2lnbmluZy1jYS5jcmwwDQYJKoZIhvcNAQENBQADggGBADTU+pLkntdPJtn/FgCKWZ3DHcUORTfLI4KLdzsL7GQgAckqi3bSGzG7a88427J2g67E31K1dt/SnutHhpAEpJ3ETTkvz97zlaIKvhjJq1VP8k3qgrvKgNhmWI+KdxMEo9MyAvitDdJIrta+Z043JaleaYUJLqkzf/6peCEVQ1g+eaIj9YV11LW3Z9vRCUdKyxcY31YogkkS3WTF4spUOOFgzK6xz2vNpMOilwV9U0y/vivT194zkR1gItsASuIjQDyLG+wZ+V+5+CCroWUAfoU4mkzDGh35AR5x/u+Ixeg1rypyQKoUw6PM7YllXloyyfQRulyu0LIOS/XyniYOAWeBswOhE6n+O88fstGYcgyvN3S0sVrvPayKeC2m6QMQ/zrYZW+TIdhmmrL4DW819/jcbfvQsUqc6FcPLmwu8fveYLkeWpS7D30nmXlLNGWQMgP8WssFn8dyf1VZqkC+fpWCmDjppLgaOnDKkmKBuFNK7hC91gUkcWa9shvMqpulhg==\",\"MIIEzzCCAzegAwIBAgIBATANBgkqhkiG9w0BAQ0FADBqMRwwGgYDVQQDDBNJbnRlbCBBbWJlciBSb290IENBMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1NhbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjAeFw0yMzAxMDQwNTAzMzdaFw0zNjEyMzEwNTAzMzdaMFsxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEaMBgGA1UECgwRSW50ZWwgQ29ycG9yYXRpb24xIzAhBgNVBAMMGkludGVsIEFtYmVyIEFUUyBTaWduaW5nIENBMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAqwu9IEnNWJ/TWq/4qlL8SfppAOC/wCBo0GSxYUFvXXHUKIGCzTRTLxeNtGfMB9JolrT+XGFUFDhW8NuNH27uQBe4pKfqw6+IMkoH6qIGxidZmixM5pRA/VfVjJUthHhCewFjvw+Qv1uGppVeb6skHXzL5Ur3s9Sav3d9GXDymzdK+ehrxYPABfluBu12AQrKM+zQdr/MjT48YGO50nDEDcYQqVC0yPaMl3WuKW0KVq9dkkNyHcxWujRX/JNoQ8eeQ5XhzBTmSveakpUH+5dCWAEAnXrZ0Vsy8BI3tA1BfR9JAImjRZa6xclVr0pUGw/w+y5ZsVYjiqkbkeqqutjr+VBDUwZ87TgzeDwsSzDGoGfEhGh2VHoUpppKf6wSjZ/n/AgmYcXxz6JI5i3P8hCiocxG4Ml6HzYalP8flugWDqPRyxARFtBUojUyY23NfKFMOjwuI8AXelBVJ+To42Wp1+E5WlLkD9shlc/NA+Lp/SHmNpJMYFG+9YDeW7EuJ92JAgMBAAGjgY4wgYswHQYDVR0OBBYEFF71egHO3owN4+tlc4ZWxpbwg9YrMB8GA1UdIwQYMBaAFHRzOYxqLqiHX6nSiP53nGiO968OMA8GA1UdEwEB/wQFMAMBAf8wOAYDVR0fBDEwLzAtoCugKYYnVVJJOmh0dHBzOi8vYW1iZXIuaW50ZWwuY29tL3Jvb3QtY2EuY3JsMA0GCSqGSIb3DQEBDQUAA4IBgQABLNJhfx0LK9aJx6XRRnxBNhy3+kuwv5UKoZbAomvJacxB5YN9gKQ9nl+3nuAYRacMKrVlKmQsZz/TeA41Ufis7H9kKXMtIVP0fQBQsVywK/DPWAUm6a4n4tSDXRHz6gSd2hRQRP5zyqRCkbAbNvlO6HUO/P3EwXQdkMcXqRzXJa00JG+4ESnfRTCRP3NKyDaC0z/dFnK4BuQXHiIjAAzhhJZWPBks1ChdDQbDf21Ft9tYd2+4+dM6vbn9qEXWP3jBj1d/cQ9+0e5bQQFkDt6x+F7X+OGN42pJeCKolZfx4yGeKo0M4OH70EI6WkuBbISXMUuBEUOhIpNcDT2urmpd0jVfs47fYG/MVQpIziLysSEfU8heEzuuqdt/zw5XfI2our0LhpItNIHr7TQH3jKjUyQUYsGF2vURII3/Z7eEJxZOUKTJyVmGbqKQZ4tXVkQ7XDNs9q4b942K8Zc39w5KFn1Os5HbDCCNoG/QNwtX957rYL/5xBjvZ1HaFFTepmU=\",\"MIIExTCCAy2gAwIBAgIUepkR+/+jiocx/t8R1KUjsHiBLaswDQYJKoZIhvcNAQENBQAwajEcMBoGA1UEAwwTSW50ZWwgQW1iZXIgUm9vdCBDQTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRQwEgYDVQQHDAtTYW50YSBDbGFyYTEaMBgGA1UECgwRSW50ZWwgQ29ycG9yYXRpb24wHhcNMjMwMTA0MDUwMjEzWhcNNDkxMjMxMDUwMjEzWjBqMRwwGgYDVQQDDBNJbnRlbCBBbWJlciBSb290IENBMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1NhbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAL3nxzqexbSXgvLp+RNwA2w+b0X4G4Oqtu6mBWbq+GYTiQVi8Lch6NBO2QaF9WaCaSD4Sbx17yfMLO1v6p4hihjWHS1uODSDpXzUFYCuusfKL2hLWe8T6cNTNhgJWsQPJ2awTUQUJD6LpMLmos/jUb37/461kj/GsBy2/B5s1ZD3O9qnra8ElADLsiAkBAQP7Ke5WkVn9yW1bwHis1CfQsTNXirw9AiOOxgVYuIugZBddkDk3tIB8KfRpC4Fs8xOpciiBhIiCbvq0zAqWlTl2bJ510wiu+Fi3I7lF3dPk36y6xfq15SWNPTbyIbxh5Jx1eDu88JhlWDChBReKDPcS+LWDqwR15r+31kMhVnS631GCQKk/tREcnv3bEpu3NoNuo27tDUTAtooBCh/PUtqMNcOmKW90dSLE2wwNx/SkVaeRfQ+IEHA4jfwKyxnQ06NYQXP/4LrSkCv9Cob9fjk7x3c/kX0esmwDHAWBF3PZ/cfbE6SWExlDkWezVuA2aG3OwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR0czmMai6oh1+p0oj+d5xojvevDjAfBgNVHSMEGDAWgBR0czmMai6oh1+p0oj+d5xojvevDjAOBgNVHQ8BAf8EBAMCAQYwDQYJKoZIhvcNAQENBQADggGBAILrQFpyfVdbI6b3yC3HnyNniC1kHLDKcUND3Z7K7WGIxeQdaNiXLF7M8Ddvc1drzNrUKq4490kgd8zv+tmJpPSzkPpmMAFTyDWa9zMgzVQ70SoSZKuCh/oCMkRytL9/uMhgUjhIwiQ/UUr6n/blKS5kg1hOmTNH0BeFJ5tSkj7WdyaUNCG/Vpz2rZ74GP0X5jKyUO2TmbLrqbJqasoap72R+m6UCS2sVH5deFnsCTAL1PtmIHruSh9iMgfN9E7fIrP8GpAx4ZBjfUhT1q6eClDoegFp8/14Xf8GtoaTn60xpB/mzS2gUN1SR95RKG+MCTvgD2PMQTgmjkHnphHbVTL4Zs6Wv6lIW/Jl8qnZfk3XObK9CsZgBQVy6lPjYrqXvQHotYH3Sgr761EPCb3cFampts3o4xYZWcNscMnbQnt77dEIPsVhliOCYjOBEYQJNhoh+bx2qmQMB41PzwvFzpIevDRYLuPojH58NYQpjzx5z2wWApUEpO39QwySOleQFQ==\"],\"kid\":\"12345\"}]}");
	mockServer.start();
	const char *sample_baseurl1 = "localhost:8081/invalid-e-and-n";
	char *sample_baseurl = (char *) calloc(1, 38 * sizeof(char));

	if (NULL == sample_baseurl)
	{
		ERROR("Error: In memory allocation for sample_baseurl\n");
	}

	memcpy(sample_baseurl, sample_baseurl1, 37);

	struct token *ta_token = (token *) malloc(sizeof(token));
	// signature field at the end is replaced with a wrong one here.
	const char *tokenWithWrongSign1 =
		"eyJhbGciOiJQUzM4NCIsInR5cCI6IkpXVCIsImprdSI6ImxvY2FsaG9zdDo4MDgwL3dyb25nLXNpZ25hdHVyZSIsImtpZCI6IjEyMzQ1In0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.by_5RnhiYpPHIVXaVBWO6QlAMoTW22d87mv1kX24qfQ";
	char *tokenWithWrongSign = (char *) calloc(1, 246 * sizeof(char));

	if (NULL == tokenWithWrongSign)
	{
		ERROR("Error: In memory allocation for tokenWithWrongSign\n");
	}

	memcpy(tokenWithWrongSign, tokenWithWrongSign1, 245);
	ta_token->jwt = tokenWithWrongSign;

	jwt_t *parsed_token = NULL;
	int result = verify_token(ta_token, sample_baseurl, NULL, &parsed_token,0,0);

	ASSERT_NE(result, 0);

	free(ta_token);
	free(sample_baseurl);
	free(tokenWithWrongSign);
	ta_token = NULL;
	sample_baseurl = NULL;
	tokenWithWrongSign = NULL;

	// Stop the mock server
	mockServer.stop();
}
